@using ChemAnalyst.ViewModel
@model List<ChemAnalyst.ViewModel.StackedViewModel>

@{
    var XLabels1 = "";
    var YValues1 = "";
    var label21 = "";
    var fValue = Model.FirstOrDefault().FirstValue;
    var lValue = Model.FirstOrDefault().LastValues;
    var SelectedValues = Model.FirstOrDefault().SelectedValues;

    if (SelectedValues == null)
    {
        SelectedValues = "Empty";

    }

    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.FirstOrDefault().LstData.Select(x => x.DimensionOne).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.LstData.Select(w => w.Quantity)).ToList());
    var label2 = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.StackedDimensionOne).ToList());
    var Product = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.Product).FirstOrDefault());
    var ChartType = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.ChartType).FirstOrDefault());
    var range = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.range).FirstOrDefault());
    var Category = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.category).FirstOrDefault());
    var compare = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.Compare).FirstOrDefault());

    var fromdate = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.FromDate).FirstOrDefault());
    var todate = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.ToDate).FirstOrDefault());
}


@{
    if (Session["UserRole"] != null && Session["UserRole"].ToString().ToUpper() == "CUSTOMER")
    {
        Layout = "~/Views/Shared/_LayoutCustomer.cshtml";
    }


}

<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no">

    <title>Chem Analyst </title>
    <link href="~/css/oswald-font.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/bootstrap.min.css" type="text/css" />
    <link href="~/css/font-awesome.min.css" rel="stylesheet">
    <link href="~/css/oswald-font.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/animate.css" type="text/css" />
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">
    <link rel="shortcut icon" href="~/images/favicon.ico">
    <link rel="stylesheet" href="~/css/owl.carousel.min.css">
    <link rel="stylesheet" href="~/css/owl.theme.default.min.css">
    <link rel="stylesheet" href="~/css/custom.css" type="text/css" />
    <link href="~/css/style.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/bootstrap-multiselect.css">

    <style>
        .rangeSlider .slidecontainer {
            width: 100%;
        }

        .rangeSlider {
            margin-left: 30px;
        }

            .rangeSlider .slider {
                -webkit-appearance: none;
                width: 96%;
                height: 10px;
                border-radius: 7px;
                background: #1478e4;
                outline: none;
                opacity: 0.7;
                -webkit-transition: .2s;
                transition: opacity .2s;
            }

                .rangeSlider .slider:hover {
                    opacity: 1;
                }

                .rangeSlider .slider::-webkit-slider-thumb {
                    -webkit-appearance: none;
                    appearance: none;
                    width: 25px;
                    height: 25px;
                    border-radius: 50%;
                    background: #7db11a;
                    cursor: pointer;
                }

                .rangeSlider .slider::-moz-range-thumb {
                    width: 25px;
                    height: 25px;
                    border-radius: 50%;
                    background: #7db11a;
                    cursor: pointer;
                }
    </style>

</head>


<body>




    <div class="page-content">
        <div class="static-page">
            <div class="container">





                <div class="filter-chart-type">
                    @using (Html.BeginForm("ShowUserChart", "ChemicalPricing", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        <div class="row">
                            <div class="col-md-4">
                                <p><i class="fa fa-bars"></i> Category</p>
                                @Html.DropDownList("category", new SelectList(ViewBag.ProductList, "Value", "Text"), "Please select category", new { @id = "category", @class = "btn btn-primary width100", required = "required", oninvalid = "this.setCustomValidity('Please select Category')", onchange = "try{setCustomValidity('')}catch(e){}" })


                            </div>
                            <div class="col-md-4 pl-0">
                                <p><i class="fa fa-list"></i> Product</p>
                                <select class="btn btn-primary width100" id="ddlProduct" name="ddlProduct" required="required" oninvalid="this.setCustomValidity('Please select product')" onchange="try{setCustomValidity('')}catch(e){}"></select>
                            </div>

                            <div class="col-md-4 pl-0">
                                <p><i class="fa fa-random"></i> Range</p>
                                <select id="ddlRange" name="ddlRange" class="btn btn-primary width100" required="required" oninvalid="this.setCustomValidity('Please select Range')" onchange="try{setdtval();setCustomValidity('')}catch(e){}">
                                    <option value="">Select Range</option>
                                    <option value="Yearly">Yearly</option>
                                    <option value="Monthly">Monthly</option>
                                    <option value="Quarterly">Quarterly</option>
                                    <option value="Weekly">Weekly</option>
                                    <option value="Daily basis">Daily basis</option>
                                    <option value="Daily Bulk">Daily Bulk</option>
                                </select>

                            </div>

                            <div class="col-md-4 mt10">
                                <p>
                                    <i class="fa fa-compress"></i> Comparision
                                </p>
                                <select name="example-getting-started" id="example-getting-started" class="btn btn-primary width100" multiple="multiple"> </select>
                                @*<option value="Sulfer">Sulfer</option>multiple="multiple"
                            <option selected="selected" value="xyz">Xyz</option>
                            <option selected="selected" value="pqr">Pqr</option>
                            <option value="lmn">Lmn</option>*@


                            </div>
                            <div class="col-md-4 pl-0 mt10">
                                <p><i class="fa fa-bar-chart"></i> Chart Types</p>
                                <select class="btn btn-primary width100" id="ddlChart" name="ddlChart">
                                    <option value="line">Line Chart</option>
                                    <option value="bar">Bar Chart</option>
                                    <option value="pie">Pie Chart</option>
                                </select>
                            </div>

                            <div style="display:@(ViewBag.QYears == null ? "" : "none")" class="col-md-2 dtcol mt10">
                                <p><i class="fa fa-bar-chart"></i> From Date</p>
                                <input type="text" class="btn btn-primary width100" id="fromdate" name="fromdate" autocomplete="off" />

                            </div>
                            <div style="display:@(ViewBag.QYears == null ? "" : "none")" class="col-md-2 dtcol mt10">
                                <p><i class="fa fa-bar-chart"></i> To Date</p>
                                <input type="text" class="btn btn-primary width100" id="todate" name="todate" autocomplete="off" />
                            </div>

                            <div style="display:@(ViewBag.QYears != null ? "" : "none")" class="col-md-4 yrcol  mt10">
                                <p><i class="fa fa-bar-chart"></i> Year</p>
                                <select class="btn btn-primary width100" id="ddlyear" name="ddlyear">
                                    @{  ChemAnalyst.DAL.ChemicalPricing Objdal = new ChemAnalyst.DAL.ChemicalPricing();

                                        foreach (var item in Objdal.GetYear())
                                        {
                                            <option value="@item.Year">@item.Year</option>
                                        }
                                    }
                                </select>
                            </div>
                            <input type="hidden" id="MaxValue" name="MaxValue" value="" />
                            <input type="hidden" id="MinValue" name="MinValue" value="" />

                            <input type="hidden" id="ClearValue" name="ClearValue" value="" />
                            <div class="col-md-12 pl-0 mt12" style="margin-left: 15px;">
                                <button type="submit" class="btn btn-green mt27" id="ViewChart" value="ViewChart">
                                    <i class="fa fa-refresh"></i>
                                    Vew Chart
                                </button>

                                <button type="submit" class="btn btn-green mt30" id="submit" value="Reset" name="submit" style="display:none">
                                    <i class="fa fa-refresh"></i>
                                    Reset
                                </button>

                                <span style="cursor:pointer" class="btn btn-green mt30" onclick="generatePDF()">Export as PDF</span>

                            </div>
                            

                        </div>
                                        }
                </div>
                <button class="btn btn-green mt27" id="download-pdf" style="display:none">Download PDF</button>



                @*<div class="filter-checkbox-btn">


                    <ul>
                        @foreach (string item in (Model.FirstOrDefault().LstData.Select(x => x.DimensionOne).ToList()))
                        {
                            <li><a href="#">@item <i class="fa fa-close"></i></a></li>
                        }
                    </ul>



                </div>*@


                <div id="invoice">
                    <canvas id="canvas"></canvas>
                    <div style="height:20px"></div>
                    <div class="rangeSlider col-lg-12" style="margin:0;cursor: pointer; color: #f30404;">
                        <a onclick="SubmitResetForm()" title="Reset" id="submitReset" style="float: right;"><i class="fa fa-refresh"></i></a>
                        <div class="slidecontainer" style="display:none" id="slidecontainer1">
                            <input type="range" min="" max="" value="" class="slider" id="myRange">
                            <div style="height:10px"></div>
                            <p>Value: <span id="demo"></span></p>
                        </div>


                    </div>

                    <div class="col-md-12">
                        <div style="height:30px"></div>
                        <div class="common-desc ">
                            <h4 style="border-bottom: 1px solid #ccc">Commentary   <a href="#" id="hrefComentery" style="cursor: pointer;font-size: 14px;float: right;" data-toggle="modal" data-target="#Comentery" onclick="ShowCommentaries()"><span>View all</span></a></h4>
                            @*<h4 style="border-bottom: 1px solid #ccc">Commentary   <a href="#" style="font-size: 14px;float: right;" data-toggle="modal" onclick="ShowCommentaries()"><span>View all</span></a></h4>*@
                            <p>
                                @Model.FirstOrDefault().Commentary


                            </p>
                        </div>

                        <div class="custom-table">
                            <a href="javascript:void(0)" id="exportxls2" onclick="exportToExcel('tblRegisteredUsers', 'Chemical-Pricing.')" class="btn btn-green mt30 pull-right">Export as Excel</a>
                            <br /><br /><br /><br />
                            <table class="table table-hover table-bordered" id="tblRegisteredUsers">
                                <thead>
                                    <tr class="table-primary">
                                        <th></th>
                                        @foreach (string column in (Model.FirstOrDefault().LstData.Select(x => x.DimensionOne).ToList()))
                                        {
                                            <th>@column</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (string count in Model.Select(x => x.StackedDimensionOne).ToList())
                                    {
                                        <tr>
                                            @foreach (var data in Model.Where(x => x.StackedDimensionOne == count).ToList())

                                            {
                                                <th>@count</th>
                                                foreach (var value in data.LstData.Select(x => x.Quantity).ToList())
                                                {
                                                    <th>@value</th>
                                                }
                                            }
                                        </tr>
                                    }

                                </tbody>
                            </table>



                        </div>


                    </div>


                </div>
            </div>

        </div>



    </div>
    <!-- The Modal -->
    <div class="modal" id="Comentery">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h1 class="modal-title">Commentaries </h1>
                    <button type="button" class="close" data-dismiss="modal">×</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body" id="Commentaries">

                </div>




                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>



    <div class="clearfix fillbluedark"></div>

    <div class="clearfix"></div>
    <div class="clearfix"></div>
    <footer>

        <div class="container">



            <div class="copyright">

                <p>Copyright © 2019 Chem Analyst Pvt. Ltd. All rights reserved.</p>
            </div>
        </div>


    </footer>











    @*<script src="~/js/jquery-3.3.1.slim.min.js"></script>*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>

    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="~/js/popper.min.js"></script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="~/js/bootstrap-multiselect.js"></script>
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js"></script>*@
    <script src="~/js/Chart.min.js"></script>

    <script src="~/js/owl.carousel.js"></script>
    <script src="~/js/wow.min.js"></script>
    <script src="~/js/honey-custom.js"></script>

    <script src="~/js/utils.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>

    <link rel="stylesheet" type="text/css" href="~/css/jquery.datetimepicker.css" >
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="jquery.js"></script>
    <script src="~/js/jquery.datetimepicker.full.min.js"></script>

    <script src="~/js/html2pdf.bundle.min.js"></script>



    <script type="text/javascript" src="https://oss.sheetjs.com/js-xlsx/xlsx.core.min.js"></script>
    <script type="text/javascript" src="https://sheetjs.com/demos/Export2Excel.js"></script>


    <script src="https://igniteui.com/js/external/FileSaver.js"></script>
    <script src="https://igniteui.com/js/external/Blob.js"></script>
   

    <script src="https://www.github.developerdan.com/table-to-json/javascripts/jquery.tabletojson.min.js"></script>
    <script>

        function SubmitResetForm()
        {
            $("#submit").trigger("click");
        }

    </script>
    <script type="text/javascript">
        $(function () {
            jQuery('#fromdate').datepicker({
                changeMonth: true,
                changeYear: true ,
                onSelect: function (selected) {
                    var diff = 30;
                    if($("#ddlRange").val() == "Yearly" || $("#ddlRange").val() == "Monthly"){
                        diff = (365*5);
                    }
                    if($("#ddlRange").val() == "Quarterly" ){
                        diff = (365);
                    }
                    if($("#ddlRange").val() == "Weekly" || $("#ddlRange").val() == "Daily basis" || $("#ddlRange").val() == "Daily Bulk"){
                        diff = (30);
                    }
                    var dt = new Date(selected);
                    dt.setDate(dt.getDate() + diff);
                    $("#todate").datepicker("option", "maxDate", dt);
                    $("#todate").datepicker("option", "minDate", new Date(selected));
                }
            });
            jQuery('#todate').datepicker({
                changeMonth: true,
                changeYear: true ,
                onSelect: function (selected) {


                    var diff = 30;
                    if($("#ddlRange").val() == "Yearly" || $("#ddlRange").val() == "Monthly"){
                        diff = (365*5);
                    }
                    if($("#ddlRange").val() == "Quarterly"){
                        diff = (365);
                    }
                    if($($("#ddlRange").val() == "Weekly" || "#ddlRange").val() == "Daily basis" || $("#ddlRange").val() == "Daily Bulk"){
                        diff = (30);
                    }

                    var dt = new Date(selected);
                    dt.setDate(dt.getDate() - diff);
                    $("#fromdate").datepicker("option", "maxDate",new Date(selected) );
                    $("#fromdate").datepicker("option", "minDate",dt );
                }
            });

        });


        function exportToExcel(tableId, tableName) {
            //showloader();
            debugger;
            setTimeout(function () { export_table_to_excel(tableId, 'xlsx' || 'xlsx', tableName); }, 100);


        }

        function export_table_to_excel(id, type, fn) {
            debugger;

            var table ;
            if (id == 'tbllince') {
                $("#exportResult").show();
                // tbllince
                table = $('#tbllince').tableToJSON();
                $("#exportResult").hide();
            }
            else {
                table = $('#tblRegisteredUsers').tableToJSON();
            }
            //var data = JSON.stringify(table);
            var data = JSON.parse(JSON.stringify(table));

            //console.log(data)
            // setTimeout(function () {  }, 5000);
            var ws = XLSX.utils.json_to_sheet(data);

            /* add to workbook */
            var wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "tbl");

            /* generate an XLSX file */
            XLSX.writeFile(wb, fn+type);
            //setTimeout(function () { hideloader(); }, 100);
        }

        $(document).ready(function () {


            var range = $(ddlRange).find("option:selected").val();
            var ddlCustomers = $("#ddlChart");
            if (range == "Daily basis") {
                ddlCustomers.empty().append('<option selected="selected" value="line" >Line Chart</option>');
            }
            else {
                ddlCustomers.empty().append('<option selected="selected" value="line" >Line Chart</option><option value="bar" >Bar Chart</option> <option  value="pie" >Pie Chart</option>');
            }
            ShowCommentariesByDeafult()
        });

        function ShowCommentaries()
        {
            debugger;
            var  ProductId = $('#ddlProduct').val();
            $.ajax({
                type: "POST",
                url: "../ChemicalPricing/GetCommentaries",
                data: "{ ProductId:"+ ProductId +"}" ,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                success: function (response) {
                    $("#Commentaries").html('');
                    $.each(response, function () {
                        debugger;
                        //ddlCustomers.append($("<option></option>").val(this['Value']).html(this['Text']));
                        $("#Commentaries").append($("<h3 style='font-size:20px !important; font-weight: bold;'> "+this.Text+" </h3>")).append($("<p style='font-size:14px !important'> "+this.Value+" </p>"));
                    });

                    $("#Comentery").show()

                },
                failure: function (response) {
                    // alert(response.responseText);
                },
                error: function (response) {
                    // alert(response.responseText);
                }
            });
        }

        function ShowCommentariesByDeafult()
        {
            //debugger;
            var  ProductId = 'None';
            $.ajax({
                type: "POST",
                url: "../ChemicalPricing/GetCommentaries/ProductId?=None",
                //data: "{ ProductId: "+ ProductId +"}" ,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                success: function (response) {
                    $("#Commentaries").html('');
                    $.each(response, function () {
                        debugger;
                        //ddlCustomers.append($("<option></option>").val(this['Value']).html(this['Text']));
                        $("#Commentaries").append($("<h3 style='font-size:20px !important; font-weight: bold;'> "+this.Text+" </h3>")).append($("<p style='font-size:14px !important'> "+this.Value+" </p>"));
                    });



                },
                failure: function (response) {
                    // alert(response.responseText);
                },
                error: function (response) {
                    // alert(response.responseText);
                }
            });
        }

        function ResetForm()
        {
            $('#ClearValue').val('ClearMaxValue');

        }

    </script>
    <script>
        //donwload pdf from original canvas
        function downloadPDF() {


            var canvas = document.querySelector('#canvas');
            //creates image
            var canvasImg = canvas.toDataURL("image/png", 1.0);//

            //creates PDF from img
            var doc = new jsPDF('landscape');
            doc.setFontSize(20);

            doc.setDrawColor(255, 0, 0);
            doc.setFillColor(255, 255, 255);
            doc.rect(10, 10, 150, 160, "F");
            doc.setDrawColor(255, 0, 0);


            doc.addImage(canvasImg, 'PNG', 10, 10, 280, 150 );
            doc.save('ChemicalPricingData.pdf');
        }
                document.getElementById('download-pdf').addEventListener("click", downloadPDF);



        $("body").on("change", "#category", function () {
            var CatId=$(category).find("option:selected").val();
            var ddlCustomers = $("#ddlProduct");
            var ddlCompare = $("#example-getting-started");
            $("#example-getting-started").multiselect('destroy');
            $('#example-getting-started').empty()
            // example-getting-started
            ddlCustomers.empty().append('<option selected="selected" value="" disabled = "disabled">Loading.....</option>');
           // ddlCompare.empty().append('<option selected="selected" value="" disabled = "disabled">Loading.....</option>');

            $.ajax({
                type: "POST",
                url: "./GetProductNameUser",
                data: "{ CatId:"+ CatId +"}" ,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                success: function (response) {
                    ddlCustomers.empty().append('<option selected="selected" value=""> select Product</option>');
                  //  ddlCompare.empty().append('<option selected="selected" value=""> select compare Product</option>');

                    $.each(response, function () {
                        ddlCustomers.append($("<option></option>").val(this['Value']).html(this['Text']));
                        ddlCompare.append($("<option  ></option>").val(this['Value']).html(this['Text']));

                    });
                    $("#example-getting-started").multiselect();
                },
                failure: function (response) {
                    //  alert(response.responseText);
                },
                error: function (response) {
                    //  alert(response.responseText);
                }
            });

        });

        $("body").on("change", "#ddlRange", function () {
            var range=$(ddlRange).find("option:selected").val();
            var ddlCustomers = $("#ddlChart");
            if (range == "Daily basis") {
                ddlCustomers.empty().append('<option selected="selected" value="line" >Line Chart</option>');
            }
            else {
                ddlCustomers.empty().append('<option selected="selected" value="line" >Line Chart</option><option value="bar" >Bar Chart</option> <option  value="pie" >Pie Chart</option>');
            }
        });


        function Drowchart(id, d) {
            var XLabels = @Html.Raw(XLabels);
            var YValues = @Html.Raw(YValues);
            var label = @Html.Raw(label2);
            debugger
            var firstValue = label[0];
            var lasttValue = label[label.length-1];
            $("#myRange").attr("min", @fValue);
            $("#myRange").attr("max", @lValue);

            var selected= '@Html.Raw(SelectedValues.ToString())';
            if (selected != "Empty") {
                if ('@fValue'==selected) {
                    $("#myRange").attr("value", firstValue);
                }
                else {
                    $("#myRange").attr("value", '@SelectedValues');
                }
            }
            else {
                $("#myRange").attr("value", firstValue);
            }



            var output = document.getElementById("demo");
            output.innerHTML = firstValue;

            var aux = 0;
            var barChartData = {
                labels: @Html.Raw(label2),
                datasets: []
            }
            XLabels.forEach(function(a, i) {
                var data = [];
                YValues.forEach(function(a, i) {
                    data.push(a[aux]);
                });
                barChartData.datasets.push({
                    label: XLabels[aux],
                    fill: false,
                    backgroundColor: random_rgba(),
                    borderColor: Bcolor,
                    data: data
                });
                aux++;
            });

            var  options= {
                responsive: true,
                title: {
                    display: true,
                    text: 'Chemical Analysis Chart'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },

                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: false,
                            labelString: 'Month'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: false,
                            labelString: 'Value'
                        },
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        }
                    }]
                }
            }
            var Bcolor;
            function random_rgba() {

                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                Bcolor=color;
                return color;
                //var o = Math.round,
                //    r = Math.random,
                //    s = 100;
                //return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';
            }
            debugger
            var ctx = document.getElementById(id).getContext('2d');
            window.myLine =  new Chart(ctx, {      options: options,
                data: barChartData,
                type: d
            });
            // window.myLine = new Chart(ctx, config);
        }


        window.onload = function () {

            var Product = @Html.Raw(Product);
            var ChartType = @Html.Raw(ChartType);
            var range = @Html.Raw(range);
            var from = @Html.Raw(fromdate);
            var to = @Html.Raw(todate);
            var Category = @Html.Raw(Category);

            $('#category').val(Category).trigger('change');

            $('#ddlProduct').val(Product);
            $('#ddlChart').val(ChartType);
            $('#ddlRange').val(range);

            $('#fromdate').val(from);
            $('#todate').val(to);
            $('#ddlChart').val(ChartType);

            var compare = @Html.Raw(compare);
            if(compare!='')
            {
                var array = compare.split(',');
                for(var i=0;i<array.length;i++)
                {
                    //$("#example-getting-started").val(array[i]).find("option[value=" + array[i] +"]").attr('selected', 'selected');
                    $("#example-getting-started option[value="+array[i]+"]").attr("selected","selected");
                }
                $("#example-getting-started").multiselect();
            }


            Drowchart('canvas', ChartType);
            var  cyear ='@(ViewBag.CYear==null?"": ViewBag.CYear)'

            if(cyear!= "") {
                $("#ddlyear").val(cyear)
            }

            //Drowchart('canvas2','bar');
            var selected = $("#ddlRange option:selected").text();
            debugger
            if (selected == "Yearly") {
                $("#slidecontainer1").show()
            }
            else
            {
                $("#slidecontainer1").hide()
            }
        };


        document.getElementById('drowchart').addEventListener('change', function () {
            var d = document.getElementById('drowchart').value;
            //alert(d);
            Drowchart('canvas', d);
        });



        document.getElementById('randomizeData').addEventListener('click', function () {
            config.data.datasets.forEach(function (dataset) {
                dataset.data = dataset.data.map(function () {
                    return randomScalingFactor();
                });

            });

            window.myLine.update();
        });

        var colorNames = Object.keys(window.chartColors);
        document.getElementById('addDataset').addEventListener('click', function () {
            var colorName = colorNames[config.data.datasets.length % colorNames.length];
            var newColor = window.chartColors[colorName];
            var newDataset = {
                label: 'Dataset ' + config.data.datasets.length,
                backgroundColor: newColor,
                borderColor: newColor,
                data: [],
                fill: false
            };

            for (var index = 0; index < config.data.labels.length; ++index) {
                newDataset.data.push(randomScalingFactor());
            }

            config.data.datasets.push(newDataset);
            window.myLine.update();
        });

        document.getElementById('addData').addEventListener('click', function () {
            if (config.data.datasets.length > 0) {
                var month = MONTHS[config.data.labels.length % MONTHS.length];
                config.data.labels.push(month);

                config.data.datasets.forEach(function (dataset) {
                    dataset.data.push(randomScalingFactor());
                });

                window.myLine.update();
            }
        });

        document.getElementById('removeDataset').addEventListener('click', function () {
            config.data.datasets.splice(0, 1);
            window.myLine.update();
        });

        document.getElementById('removeData').addEventListener('click', function () {
            config.data.labels.splice(-1, 1); // remove the label first

            config.data.datasets.forEach(function (dataset) {
                dataset.data.pop();
            });

            window.myLine.update();
        });

        function setdtval(){

            if($("#ddlRange").val() =="Quarterly"){
                $(".dtcol").hide();
                $(".yrcol").show();
            }else{
                $(".dtcol").show();
                $(".yrcol").hide();
            }

            if($("#ddlRange").val() =="Quarterly"){


            }
        }


        $(document).ready(function () {
            $("#Chemprice").validate({
                debug: true,
                rules: {
                    ddlProduct: {
                        required: function () {
                            if ($("#ddlProduct option[value='0']")) {
                                return true;
                            } else {
                                return false;
                            }
                        }
                    },
                    ddlChart: {
                        required: function () {
                            if ($("#ddlChart option[value='0']")) {
                                return true;
                            } else {
                                return false;
                            }
                        }
                    }, ddlRange: {
                        required: function () {
                            if ($("#ddlRange option[value='0']")) {
                                return true;
                            } else {
                                return false;
                            }
                        }
                    }
                },
                messages: {
                    ddlRange: "range Required",
                },
            });
        })

    </script>

    <script>
        var slider = document.getElementById("myRange");
        var output = document.getElementById("demo");
        output.innerHTML = slider.value;


        document.getElementById("myRange").onmousedown = function () { mouseDown() };
        document.getElementById("myRange").onmouseup = function () { mouseUp() };

        function mouseDown() {
            //document.getElementById("demo").innerHTML = "The mouse button is held down.";
        }

        function mouseUp() {
            output.innerHTML = slider.value;
            //alert(slider.value)

            $("#MinValue").val($("#myRange").attr("min"));
            $("#MaxValue").val(slider.value);

            $(".mt27").trigger("click");

        }
    </script>
    <script>
        //function generatePDF() {
        //  // Choose the element that our invoice is rendered in.
        //  const element = document.getElementById("invoice");
        //  // Choose the element and save the PDF for our user.
        //  html2pdf().from(element).save();
        //}

        function generatePDF() {
            //// Choose the element that our invoice is rendered in.
            //const element = document.getElementById("invoice");
            //// Choose the element and save the PDF for our user.
            //html2pdf()
            //  .set({ html2canvas: { scale: 4, orientation: 'landscap' } })
            //  .from(element)
            //  .save();


            var element = document.getElementById('invoice');
            debugger
            // Choose pagebreak options based on mode.
            var mode = "avoid-all";
            var pagebreak = (mode === 'specify') ?
            { mode: '', before: '.before', after: '.after', avoid: '.avoid' } :
            { mode: mode };

            $("#exportxls2").hide();
            $("#hrefComentery").hide();
            $("#slidecontainer1").hide();
            $("#submitReset").hide();


            // Generate the PDF.
            html2pdf().from(element).set({
                filename: "Chemical-Pricing-Export" + '.pdf',
                pagebreak: pagebreak,
                //jsPDF: {orientation: 'landscape', unit: 'in', format: 'letter', compressPDF: true}
                jsPDF: {orientation: 'landscape', unit: 'in', format: 'legal', compressPDF: true}
            }).save().then(function(pdf) {
                //This logs the right base64
                $("#hrefComentery").show();
                $("#exportxls2").show();
                $("#slidecontainer1").show();
                $("#submitReset").show();

                // window.location.reload();
            });;



        }
    </script>
</body>

</html>