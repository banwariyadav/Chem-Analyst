@model List<ChemAnalyst.ViewModel.StackedViewModel>
@{

    var XLabels3 = Newtonsoft.Json.JsonConvert.SerializeObject(Model.FirstOrDefault().LstData.Select(x => x.DimensionOne).ToList());
    var YValues3 = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.LstData.Select(w => w.Quantity)).ToList());
    var label3 = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.StackedDimensionOne).ToList());
}
<canvas height="190" id="canvas3"></canvas>
<script src="~/js/jquery.js"></script>
<script src="~/js/Chart.min.js"></script>
<script>



    function Drowchart3(id, d) {
        var XLabels3 = @Html.Raw(XLabels3);
        var YValues3 = @Html.Raw(YValues3);
        var label = @Html.Raw(label3);

        var aux = 0;
        var barChartData = {
            labels: @Html.Raw(label3),
            datasets: []
        }
        XLabels3.forEach(function(a, i) {
            var data = [];
            YValues3.forEach(function(a, i) {
                data.push(a[aux]);
            });
            barChartData.datasets.push({
                label: XLabels3[aux],
                fill: false,
                backgroundColor: random_rgba3(),
                borderColor: Bcolor3,
                data: data
            });
            aux++;
        });

        var  options= {
            responsive: true,
            title: {
                display: true,
                text: 'Chemical Analysis Chart'
            },
            tooltips: {
                mode: 'index',
                intersect: false,
            },

            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        display: false,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: false,
                        labelString: 'Value'
                    },
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    }
                }]
            }
        }
        var Bcolor3;
        function random_rgba3() {

            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            Bcolor3=color;
            return color;
            //var o = Math.round,
            //    r = Math.random,
            //    s = 100;
            //return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';
        }

        var ctx = document.getElementById(id).getContext('2d');
        window.myLine =  new Chart(ctx, {      options: options,
            data: barChartData,
            type: d
        });
        // window.myLine = new Chart(ctx, config);
    }
    $(document).ready(function () {
        Drowchart3('canvas3', "line");

    });

    document.getElementById('randomizeData').addEventListener('click', function () {
        config.data.datasets.forEach(function (dataset) {
            dataset.data = dataset.data.map(function () {
                return randomScalingFactor();
            });

        });

        window.myLine.update();
    });

    var colorNames = Object.keys(window.chartColors);
    document.getElementById('addDataset').addEventListener('click', function () {
        var colorName = colorNames[config.data.datasets.length % colorNames.length];
        var newColor = window.chartColors[colorName];
        var newDataset = {
            label: 'Dataset ' + config.data.datasets.length,
            backgroundColor: newColor,
            borderColor: newColor,
            data: [],
            fill: false
        };

        for (var index = 0; index < config.data.labels.length; ++index) {
            newDataset.data.push(randomScalingFactor());
        }

        config.data.datasets.push(newDataset);
        window.myLine.update();
    });

    document.getElementById('addData').addEventListener('click', function () {
        if (config.data.datasets.length > 0) {
            var month = MONTHS[config.data.labels.length % MONTHS.length];
            config.data.labels.push(month);

            config.data.datasets.forEach(function (dataset) {
                dataset.data.push(randomScalingFactor());
            });

            window.myLine.update();
        }
    });

    document.getElementById('removeDataset').addEventListener('click', function () {
        config.data.datasets.splice(0, 1);
        window.myLine.update();
    });

    document.getElementById('removeData').addEventListener('click', function () {
        config.data.labels.splice(-1, 1); // remove the label first

        config.data.datasets.forEach(function (dataset) {
            dataset.data.pop();
        });

        window.myLine.update();
    });
</script>